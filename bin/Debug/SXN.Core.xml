<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SXN.Core</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.PerformanceCounterSettingsExtensions">
            <summary>
            Specifies the configuration settings for a <see cref="T:System.Diagnostics.PerformanceCounter"/> class.
            </summary>
        </member>
        <member name="M:System.Diagnostics.PerformanceCounterSettingsExtensions.Install(System.Collections.Generic.IEnumerable{System.Diagnostics.PerformanceCounterSettings})">
            <summary>
            Installs the specified performance counters.
            </summary>
            <param name="counters">A list of counters to install.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="counters"/> is <c>null</c>.</exception>
        </member>
        <member name="T:System.Extensions.RangeExtensions">
            <summary>
            Provides a set of extension methods for the <see cref="M:System.Extensions.RangeExtensions.Range``1(System.Collections.Generic.IEnumerable{``0})"/> class.
            </summary>
        </member>
        <member name="M:System.Extensions.RangeExtensions.CombineSequences``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},System.Collections.Generic.IList{``0}@)">
            <summary>
            Sorts and combines sequences into the enumeration of <see cref="M:System.Extensions.RangeExtensions.Range``1(System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
            <typeparam name="T">The type of the elements of the <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> in which ranges should be looked.</param>
            <param name="isNext">A delegate to the method which checks whether two instance of <typeparamref name="T"/> are next to each other.</param>
            <param name="singleValues">Contains items within the <paramref name="source"/> enumeration which does not fall in to any range.</param>
            <returns>Collection of ranges within the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="isNext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Extensions.RangeExtensions.Range``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum and maximum value in the <paramref name="source"/> as the instance of <see cref="M:System.Extensions.RangeExtensions.Range``1(System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
            <typeparam name="T">The type of the elements of the <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values to determine the range.</param>
            <returns>The minimum and maximum value.</returns>
        </member>
        <member name="M:System.Extensions.RangeExtensions.Range``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a generic sequence and returns the minimum and maximum value in the <paramref name="source"/> as the instance of <see cref="M:System.Extensions.RangeExtensions.Range``1(System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to determine the range.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum and maximum value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is <c>null</c>.</exception>
        </member>
        <member name="T:System.Threading.AlignedTimer">
            <summary>
            Represents a timer which generates recurring events aligned to the <see cref="T:System.TimeUnit"/>.
            </summary>
        </member>
        <member name="M:System.Threading.AlignedTimer.#ctor(System.Threading.AlignedTimerCallback,System.TimeUnit,System.TimeSpan)">
            <summary>
            Initializes a new instance of <see cref="T:System.Threading.AlignedTimer"/> class.
            </summary>
            <param name="callback">A <see cref="T:System.Threading.AlignedTimerCallback"/> delegate representing a method to be executed.</param>
            <param name="interval">The time interval between invocations of <paramref name="callback"/>.</param>
            <param name="shift">The time shift of the invocation time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Threading.AlignedTimer.Dispose">
            <summary>
            Releases all resources used by <see cref="T:System.Threading.AlignedTimer"/>.
            </summary>
        </member>
        <member name="M:System.Threading.AlignedTimer.TimerCallback(System.Object)">
            <summary>
            Handles calls from the <see cref="F:System.Threading.AlignedTimer.timer"/>.
            </summary>
            <param name="state">An object containing application-specific information relevant to the method invoked by this method, or null.</param>
        </member>
        <member name="M:System.Threading.AlignedTimer.ScheduleNextInvocation">
            <summary>
            Schedules next invocation.
            </summary>
        </member>
        <member name="P:System.Threading.AlignedTimer.Enabled">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value which indicates whether current timer is active.
            </summary>
        </member>
        <member name="P:System.Threading.AlignedTimer.Interval">
            <summary>
            Gets the time interval between invocations of the callback.
            </summary>
        </member>
        <member name="P:System.Threading.AlignedTimer.Shift">
            <summary>
            Gets the time shift of the invocation time.
            </summary>
        </member>
        <member name="T:System.Threading.AlignedTimerCallback">
            <summary>
            Represents the method that handles calls from a <see cref="T:System.Threading.AlignedTimer"/>.
            </summary>
            <param name="invocationTime">The aligned time when callback has been invoked.</param>
        </member>
        <member name="T:System.BaseEncoding">
            <summary>
            Specifies Base-N Encoding type.
            </summary>
        </member>
        <member name="F:System.BaseEncoding.Base16">
            <summary>
            A Base-16 encoding.
            </summary>
        </member>
        <member name="F:System.BaseEncoding.Base32">
            <summary>
            A Base-32 encoding.
            </summary>
        </member>
        <member name="F:System.BaseEncoding.Base32WithPadding">
            <summary>
            A Base-32 encoding with padding.
            </summary>
        </member>
        <member name="F:System.BaseEncoding.Base64">
            <summary>
            A Base-64 encoding.
            </summary>
        </member>
        <member name="F:System.BaseEncoding.Base64WithPadding">
            <summary>
            A Base-64 encoding with padding.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Tracing.DiagnosticsEventHandler">
            <summary>
            Represents the method that will handle the diagnostic events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An object that contains the diagnostic event data.</param>
        </member>
        <member name="T:System.Diagnostics.Tracing.DiagnosticsEventArgs">
            <summary>
            Encapsulates diagnostics event data.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Tracing.DiagnosticsEventArgs.level">
            <summary>
            The level of the event.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Tracing.DiagnosticsEventArgs.message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="F:System.Diagnostics.Tracing.DiagnosticsEventArgs.source">
            <summary>
            The source of the event.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Tracing.DiagnosticsEventArgs.#ctor(System.Diagnostics.Tracing.EventLevel,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Diagnostics.Tracing.DiagnosticsEventArgs"/> class.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="message">The message of the event.</param>
            <param name="source">The source of the event.</param>
        </member>
        <member name="M:System.Diagnostics.Tracing.DiagnosticsEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Diagnostics.Tracing.DiagnosticsEventArgs"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
        </member>
        <member name="M:System.Diagnostics.Tracing.DiagnosticsEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:System.Diagnostics.Tracing.DiagnosticsEventArgs.Level">
            <summary>
            Gets the level of the event.
            </summary>
        </member>
        <member name="P:System.Diagnostics.Tracing.DiagnosticsEventArgs.Message">
            <summary>
            Gets the message of the event.
            </summary>
        </member>
        <member name="P:System.Diagnostics.Tracing.DiagnosticsEventArgs.Source">
            <summary>
            Gets the source of the event.
            </summary>
        </member>
        <member name="T:System.Extensions.LinkedListExtensions">
            <summary>
            Provides a set of extension methods for the <see cref="T:System.Collections.Generic.LinkedList`1"/> class.
            </summary>
        </member>
        <member name="M:System.Extensions.LinkedListExtensions.RemoveAll``1(System.Collections.Generic.LinkedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all nodes which values satisfy the <paramref name="predicate"/> from the <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of the linked <paramref name="list"/>.</typeparam>
            <param name="list">The linked list.</param>
            <param name="predicate">The function that defines whether node should be removed.</param>
        </member>
        <member name="T:System.Extensions.TimeUnitExtensions">
            <summary>
            Provides a set of extension methods for the <see cref="T:System.TimeUnit"/> enumeration.
            </summary>
        </member>
        <member name="M:System.Extensions.TimeUnitExtensions.TryGetNext(System.TimeUnit,System.TimeUnit@)">
            <summary>
            Tries to get next time unit.
            </summary>
            <param name="timeUnit">The base time unit.</param>
            <param name="result">Contains valid <see cref="T:System.TimeUnit"/> if operation was successful, <see cref="F:System.TimeUnit.None"/> otherwise.</param>
            <returns><c>true</c> if operation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Extensions.TimeUnitExtensions.TryGetPrevious(System.TimeUnit,System.TimeUnit@)">
            <summary>
            Tries to get previous time unit.
            </summary>
            <param name="timeUnit">The base time unit.</param>
            <param name="result">Contains valid <see cref="T:System.TimeUnit"/> if operation was successful, <see cref="F:System.TimeUnit.None"/> otherwise.</param>
            <returns><c>true</c> if operation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.IEnvironmentSettings">
            <summary>
            Provides a contract for all types that represents the configuration settings of the entities which are environment dependent.
            </summary>
        </member>
        <member name="T:System.ISettings">
            <summary>
            Provides a contract for all types that represents the configuration settings.
            </summary>
        </member>
        <member name="M:System.ISettings.IsValid">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates whether this configuration settings are valid.
            </summary>
            <returns><c>true</c> if configuration settings are valid,<c>false</c> otherwise.</returns>
        </member>
        <member name="P:System.IEnvironmentSettings.EnvironmentId">
            <summary>
            The identifier of the environment.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.GenericEqualityComparer`1">
            <summary>
            Provides equality comparison of two <typeparamref name="T"/> objects.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.GenericEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of <see cref="T:System.Collections.Generic.GenericEqualityComparer`1"/> class.
            </summary>
            <param name="equals">A delegate to the method that determines whether the specified objects are equal.</param>
            <param name="getHashCode">A delegate to the method that determines whether the specified objects are equal.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="equals"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="getHashCode"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Collections.Generic.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type to compare.</param>
            <param name="y">The second object of type to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="T:System.StringSettingsBase">
            <summary>
            Provides a base class for all class that provides a lot of string settings.
            </summary>
        </member>
        <member name="F:System.StringSettingsBase.stringSettings">
            <summary>
            An identifier of the environment.
            </summary>
        </member>
        <member name="M:System.StringSettingsBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.StringSettingsBase"/> class.
            </summary>
        </member>
        <member name="M:System.StringSettingsBase.IsValid">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates whether this configuration settings are valid.
            </summary>
            <returns><c>true</c> if configuration settings are valid,<c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.TimeInterval">
            <summary>
            Represents a time interval.
            </summary>
        </member>
        <member name="F:System.TimeInterval.Millisecond">
            <summary>
            The millisecond.
            </summary>
        </member>
        <member name="F:System.TimeInterval.Second">
            <summary>
            The second.
            </summary>
        </member>
        <member name="F:System.TimeInterval.Minute">
            <summary>
            The minute.
            </summary>
        </member>
        <member name="F:System.TimeInterval.Hour">
            <summary>
            The hour.
            </summary>
        </member>
        <member name="F:System.TimeInterval.Day">
            <summary>
            The day.
            </summary>
        </member>
        <member name="M:System.TimeInterval.#ctor(System.TimeUnit,System.UInt64)">
            <summary>
            Initializes a new instance of <see cref="T:System.TimeInterval"/> structure.
            </summary>
            <param name="unit">A time unit.</param>
            <param name="length">An interval length.</param>
        </member>
        <member name="M:System.TimeInterval.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.TimeInterval"/> structure.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
        </member>
        <member name="M:System.TimeInterval.Equals(System.TimeInterval)">
            <summary>
            Returns a value indicating whether this instance and a specified <see cref="T:System.TimeInterval"/> represent the same value.
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.TimeInterval.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
        </member>
        <member name="M:System.TimeInterval.op_Implicit(System.TimeInterval)~System.TimeSpan">
            <summary>
            Converts an instance of <see cref="T:System.TimeInterval"/> structure to the instance of <see cref="T:System.TimeSpan"/> structure.
            </summary>
            <param name="value">An instance of <see cref="T:System.TimeInterval"/> to convert.</param>
            <returns>A <see cref="T:System.TimeSpan"/> instance.</returns>
        </member>
        <member name="M:System.TimeInterval.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a <see cref="T:System.TimeInterval"/> that has the same value as this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.TimeInterval.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:System.TimeInterval.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:System.TimeInterval.op_Equality(System.TimeInterval,System.TimeInterval)">
            <summary>
            Indicates whether the values of two specified <see cref="T:System.TimeInterval"/> objects are equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> and <paramref name="second"/> are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.TimeInterval.op_Inequality(System.TimeInterval,System.TimeInterval)">
            <summary>
            Indicates whether the values of two specified <see cref="T:System.TimeInterval"/> objects are not equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> and <paramref name="second"/> are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.TimeInterval.op_Addition(System.TimeInterval,System.UInt64)">
            <summary>
            Adds <paramref name="length"/> to the <paramref name="interval"/>.
            </summary>
            <param name="interval">The first value to add.</param>
            <param name="length">The second value to add.</param>
            <returns>The sum of <paramref name="interval"/> and <paramref name="length"/>.</returns>
        </member>
        <member name="M:System.TimeInterval.op_Subtraction(System.TimeInterval,System.UInt64)">
            <summary>
            Subtracts <paramref name="length"/> from the <paramref name="interval"/>.
            </summary>
            <param name="interval">The minuend.</param>
            <param name="length">The subtrahend.</param>
            <returns>The result of subtracting <paramref name="length"/> from <paramref name="interval"/>.</returns>
        </member>
        <member name="M:System.TimeInterval.Add(System.TimeInterval,System.UInt64)">
            <summary>
            Adds <paramref name="length"/> to the <paramref name="interval"/>.
            </summary>
            <param name="interval">The first value to add.</param>
            <param name="length">The second value to add.</param>
            <returns>The sum of <paramref name="interval"/> and <paramref name="length"/>.</returns>
        </member>
        <member name="M:System.TimeInterval.Subtract(System.TimeInterval,System.UInt64)">
            <summary>
            Subtracts <paramref name="length"/> from the <paramref name="interval"/>.
            </summary>
            <param name="interval">The minuend.</param>
            <param name="length">The subtrahend.</param>
            <returns>The result of subtracting <paramref name="length"/> from <paramref name="interval"/>.</returns>
        </member>
        <member name="P:System.TimeInterval.Length">
            <summary>
            The length of the interval.
            </summary>
        </member>
        <member name="P:System.TimeInterval.Unit">
            <summary>
            The time unit.
            </summary>
        </member>
        <member name="T:System.TimeUnit">
            <summary>
            Represents the base unit of time.
            </summary>
        </member>
        <member name="F:System.TimeUnit.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:System.TimeUnit.Millisecond">
            <summary>
            The millisecond.
            </summary>
        </member>
        <member name="F:System.TimeUnit.Second">
            <summary>
            The second.
            </summary>
        </member>
        <member name="F:System.TimeUnit.Minute">
            <summary>
            The minute.
            </summary>
        </member>
        <member name="F:System.TimeUnit.Hour">
            <summary>
            The hour.
            </summary>
        </member>
        <member name="F:System.TimeUnit.Day">
            <summary>
            The day.
            </summary>
        </member>
        <member name="T:System.Extensions.UInt32Extensions">
            <summary>
            Provides a set of extension methods for the <see cref="T:System.UInt64"/> class.
            </summary>
        </member>
        <member name="M:System.Extensions.UInt32Extensions.GetHighestSetBitIndex(System.UInt32)">
            <summary>
            Gets the zero based index of the highest set bit.
            </summary>
            <param name="value">The unsigned integer value.</param>
            <returns>The index of the highest set bit.</returns>
        </member>
        <member name="M:System.Extensions.UInt32Extensions.GetSetBitsCount(System.UInt32)">
            <summary>
            Gets the count of set bits.
            </summary>
            <param name="value">The unsigned integer value.</param>
            <returns>The count of set bits.</returns>
        </member>
        <member name="M:System.Extensions.UInt32Extensions.IsPowerOfTwo(System.UInt32)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates whether <paramref name="value"/> is power of 2.
            </summary>
            <param name="value">The unsigned integer value.</param>
            <returns><c>true</c> if <paramref name="value"/> is power of 2, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Extensions.UInt32Extensions.Align(System.UInt32,System.UInt32)">
            <summary>
            Aligns <paramref name="value"/> to the <paramref name="powerOfTwoBase"/>.
            </summary>
            <param name="value">The unsigned integer value.</param>
            <param name="powerOfTwoBase">The power of two align base.</param>
            <returns>Aligned value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="powerOfTwoBase"/> is not power of two.</exception>
        </member>
        <member name="T:System.IServerRequestHandler">
            <summary>
            Represents the contract for classes which handles the requests to the server.
            </summary>
        </member>
        <member name="M:System.IServerRequestHandler.TryProcessAsync">
            <summary>
            Initiates an asynchronous operation to try processes the request.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> object of type <see cref="T:System.Boolean"/>&gt; that represents the asynchronous operation.
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> equals <c>true</c> if operation has completed successfully, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:System.IServerRequestHandler.AcceptTime">
            <summary>
            The UTC time when request was accepted by the server.
            </summary>
        </member>
        <member name="T:System.EntityStateTransition">
            <summary>
            Represents the transition of the state of the entity.
            </summary>
        </member>
        <member name="F:System.EntityStateTransition.initialState">
            <summary>
            An initial state of the entity.
            </summary>
        </member>
        <member name="F:System.EntityStateTransition.targetState">
            <summary>
            A target state of the entity.
            </summary>
        </member>
        <member name="M:System.EntityStateTransition.#ctor(System.EntityState,System.EntityState)">
             <summary>
             Initializes a new instance of <see cref="T:System.EntityStateTransition"/> structure.
             </summary>
            <param name="initialState">An initial state of the entity.</param>
            <param name="targetState">A target state of the entity.</param>
        </member>
        <member name="P:System.EntityStateTransition.InitialState">
            <summary>
            Gets the initial state of the entity.
            </summary>
        </member>
        <member name="P:System.EntityStateTransition.TargetState">
            <summary>
            Gets the target state of the entity.
            </summary>
        </member>
        <member name="T:System.Json.TimeJsonConverter">
            <summary>
            Provides conversion of <see cref="T:System.DateTime"/> and  <see cref="T:System.TimeSpan"/> types to and from <see cref="T:System.Int64"/> types within the JSON.
            </summary>
        </member>
        <member name="M:System.Json.TimeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns><c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Json.TimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Json.TimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="T:System.Collections.Generic.KeyValuePairEqualityComparer`2">
            <summary>
            Provides equality comparison of two <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:System.Collections.Generic.KeyValuePairEqualityComparer`2.keyComparer">
            <summary>
            A key comparer.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.KeyValuePairEqualityComparer`2.valueComparer">
            <summary>
            A value comparer.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePairEqualityComparer`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initialize a new instance of <see cref="T:System.Collections.Generic.KeyValuePairEqualityComparer`2"/> class.
            </summary>
            <param name="keyComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to compare keys.</param>
            <param name="valueComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to compare values.</param>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePairEqualityComparer`2.Equals(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type to compare.</param>
            <param name="y">The second object of type to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePairEqualityComparer`2.GetHashCode(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="T:System.StringTemplate">
            <summary>
            Provides creation of strings by using template and variables.
            </summary>
        </member>
        <member name="F:System.StringTemplate.encoding">
            <summary>
            The <see cref="P:System.StringTemplate.Encoding"/> which is used for the template instantiation.
            </summary>
        </member>
        <member name="F:System.StringTemplate.segments">
            <summary>
            Template split to the collection of segments.
            </summary>
        </member>
        <member name="M:System.StringTemplate.#ctor(System.Text.Encoding,System.String,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:System.StringTemplate"/> class.
            </summary>
            <param name="encoding">The <see cref="P:System.StringTemplate.Encoding"/> which is used for the template instantiation.</param>
            <param name="template">The string representation of the string template.</param>
            <param name="variables">An object array that contains zero or more variables to use within the <paramref name="template"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="template"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="template"/> is empty.</exception>
        </member>
        <member name="M:System.StringTemplate.Instantiate(System.String[])">
            <summary>
            Instantiates the template using <paramref name="arguments"/> specified.
            </summary>
            <param name="arguments">An array of variables to use for template instantiation.</param>
            <returns>A string instance of template.</returns>
        </member>
        <member name="M:System.StringTemplate.Instantiate(System.IO.Stream,System.Byte[][])">
            <summary>
            Instantiates the template using specified <paramref name="encodedArguments"/>.
            </summary>
            <param name="stream">An output stream for the instance of the template.</param>
            <param name="encodedArguments">An array of encoded variables to use for template instantiation.</param>
        </member>
        <member name="M:System.StringTemplate.Instantiate(System.IO.Stream,System.String[])">
            <summary>
            Instantiates the template using <paramref name="arguments"/> encoded with <see cref="P:System.StringTemplate.Encoding"/>.
            </summary>
            <param name="stream">An output stream for the instance of the template.</param>
            <param name="arguments">An array of variables to use for template instantiation.</param>
        </member>
        <member name="M:System.StringTemplate.InstantiateAsync(System.IO.Stream,System.Byte[][])">
            <summary>
            Initiates an asynchronous operation to instantiate the template using specified <paramref name="encodedArguments"/>.
            </summary>
            <param name="stream">An output stream for the instance of the template.</param>
            <param name="encodedArguments">An array of encoded variables to use for template instantiation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.StringTemplate.InstantiateAsync(System.IO.Stream,System.String[])">
            <summary>
            Initiates an asynchronous operation to instantiate the template using <paramref name="arguments"/> specified.
            </summary>
            <param name="stream">An output stream for the instance of the template.</param>
            <param name="arguments">An array of variables to use for template instantiation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous operation.</returns>
        </member>
        <member name="P:System.StringTemplate.Encoding">
            <summary>
            Gets the <see cref="P:System.StringTemplate.Encoding"/> which is used for the template instantiation.
            </summary>
        </member>
        <member name="T:System.StringTemplate.Segment">
            <summary>
            Represents a segment within the template.
            </summary>
        </member>
        <member name="F:System.StringTemplate.Segment.data">
            <summary>
            The data of the argument if segment is constant.
            </summary>
        </member>
        <member name="F:System.StringTemplate.Segment.encodedData">
            <summary>
            The encoded data of the argument if segment is constant.
            </summary>
        </member>
        <member name="F:System.StringTemplate.Segment.index">
            <summary>
            The index of the argument if segment is variable.
            </summary>
        </member>
        <member name="F:System.StringTemplate.Segment.isVariable">
            <summary>
            Specifies whether template segment is variable.
            </summary>
        </member>
        <member name="M:System.StringTemplate.Segment.#ctor(System.Int32,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:System.StringTemplate.Segment"/> structure.
            </summary>
            <param name="index">The index of the argument if segment is variable.</param>
            <param name="data">The data of the argument if segment is constant.</param>
            <param name="encodedData">The encoded data of the argument if segment is constant.</param>
        </member>
        <member name="T:System.Value128Converter">
            <summary>
            Provides conversion of <see cref="T:System.Value128"/> type to other types.
            </summary>
        </member>
        <member name="M:System.Value128Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
             <returns><c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Value128Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:System.Value128Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <returns> An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="M:System.Value128Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:System.Json.MutableEnumerableJsonConverter`1">
            <summary>
            Converts an instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface to and from string within the JSON.
            </summary>
            <typeparam name="T">The base type of the enumeration element.</typeparam>
        </member>
        <member name="F:System.Json.MutableEnumerableJsonConverter`1.operationType">
            <summary>
            Specifies type with which convertor operates.
            </summary>
        </member>
        <member name="M:System.Json.MutableEnumerableJsonConverter`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:System.Json.MutableEnumerableJsonConverter`1"/> class.
            </summary>
            <param name="useFullNames">A <see cref="T:System.Boolean"/> value, which specifies whether full name of the <see cref="T:System.Type"/> of the enumeration items should be used.</param>
            <exception cref="T:System.InvalidOperationException">If one of derived types can not be uniquely identified.</exception>
        </member>
        <member name="M:System.Json.MutableEnumerableJsonConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns><c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Json.MutableEnumerableJsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
            <exception cref="T:Newtonsoft.Json.JsonSerializationException">If one of deserialize types is unknown.</exception>
        </member>
        <member name="M:System.Json.MutableEnumerableJsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serializer"/> is <c>null</c>.</exception>
        </member>
        <member name="T:System.ValueChangedEventArgs`1">
            <summary>
            Provides data for the value changed event.
            </summary>
        </member>
        <member name="M:System.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of <see cref="T:System.ValueChangedEventArgs`1"/> class.
            </summary>
        </member>
        <member name="P:System.ValueChangedEventArgs`1.CurrentValue">
            <summary>
            Gets current value of the object.
            </summary>
        </member>
        <member name="P:System.ValueChangedEventArgs`1.PreviousValue">
            <summary>
            Gets previous value of the object.
            </summary>
        </member>
        <member name="T:System.EntityState">
            <summary>
            Describes state of the entity.
            </summary>
        </member>
        <member name="F:System.EntityState.None">
            <summary>
            The entity has no state.
            </summary>
        </member>
        <member name="F:System.EntityState.Inactive">
            <summary>
            The entity is inactive.
            </summary>
        </member>
        <member name="F:System.EntityState.Active">
            <summary>
            The entity is active.
            </summary>
        </member>
        <member name="F:System.EntityState.Retired">
            <summary>
            The entity is deleted.
            </summary>
        </member>
        <member name="F:System.EntityState.Transitioning">
            <summary>
            The entity is transitioning.
            </summary>
        </member>
        <member name="F:System.EntityState.Updating">
            <summary>
            The entity is updating it's state.
            </summary>
        </member>
        <member name="F:System.EntityState.Creating">
            <summary>
            The entity is transitioning from the <see cref="F:System.EntityState.None"/> to the <see cref="F:System.EntityState.Inactive"/> state.
            </summary>
        </member>
        <member name="F:System.EntityState.Activating">
            <summary>
            The entity is transitioning from the <see cref="F:System.EntityState.Inactive"/> to the <see cref="F:System.EntityState.Active"/> state.
            </summary>
        </member>
        <member name="F:System.EntityState.Deactivating">
            <summary>
            The entity is transitioning from the <see cref="F:System.EntityState.Active"/> to the <see cref="F:System.EntityState.Inactive"/> state.
            </summary>
        </member>
        <member name="F:System.EntityState.Retiring">
            <summary>
            The entity is transitioning from the <see cref="F:System.EntityState.Inactive"/> to the <see cref="F:System.EntityState.Retired"/> state.
            </summary>
        </member>
        <member name="F:System.EntityState.Restoring">
            <summary>
            The entity is transitioning from the <see cref="F:System.EntityState.Retired"/> to the <see cref="F:System.EntityState.Inactive"/> state.
            </summary>
        </member>
        <member name="T:System.Extensions.CharExtensions">
            <summary>
            Provides a set of extension methods for the <see cref="T:System.Char"/> structure.
            </summary>
        </member>
        <member name="M:System.Extensions.CharExtensions.IsInRange(System.Char,System.Char,System.Char)">
            <summary>
            Checks whether char is in range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="upperBound">The upper bound of the range.</param>
            <returns><c>true</c> if char is in range, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.Extensions.DateTimeExtensions">
            <summary>
            Provides a set of extension methods for the <see cref="T:System.DateTime"/> structure.
            </summary>
        </member>
        <member name="F:System.Extensions.DateTimeExtensions.unixStart">
            <summary>
            UNIX start time.
            </summary>
        </member>
        <member name="M:System.Extensions.DateTimeExtensions.ToUnixTime(System.DateTime)">
            <summary>
            Converts an instance of <see cref="T:System.DateTime"/> structure to the UNIX time format.
            </summary>
            <param name="value">The instance of <see cref="T:System.DateTime"/> structure to be converted.</param>
            <returns>The UNIX representation of the time specified by the <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Extensions.DateTimeExtensions.Add(System.DateTime,System.TimeInterval)">
            <summary>
            Adds <paramref name="timeInterval"/> to the <paramref name="value"/>.
            </summary>
            <param name="value">The instance of <see cref="T:System.DateTime"/>.</param>
            <param name="timeInterval">The time interval.</param>
            <returns>The new instance of <see cref="T:System.DateTime"/> with <paramref name="timeInterval"/> added.</returns>
        </member>
        <member name="M:System.Extensions.DateTimeExtensions.Subtract(System.DateTime,System.TimeInterval)">
            <summary>
            Subtracts <paramref name="timeInterval"/> from the <paramref name="value"/>.
            </summary>
            <param name="value">The instance of <see cref="T:System.DateTime"/>.</param>
            <param name="timeInterval">The time interval.</param>
            <returns>The new instance of <see cref="T:System.DateTime"/> with <paramref name="timeInterval"/> subtracted.</returns>
        </member>
        <member name="M:System.Extensions.DateTimeExtensions.Add(System.DateTime,System.TimeUnit)">
            <summary>
            Adds <paramref name="timeUnit"/> to the <paramref name="value"/>.
            </summary>
            <param name="value">The instance of <see cref="T:System.DateTime"/>.</param>
            <param name="timeUnit">A time interval.</param>
            <returns>The new instance of <see cref="T:System.DateTime"/> with <paramref name="timeUnit"/> added.</returns>
        </member>
        <member name="M:System.Extensions.DateTimeExtensions.Subtract(System.DateTime,System.TimeUnit)">
            <summary>
            Subtracts <paramref name="timeUnit"/> from the <paramref name="value"/>.
            </summary>
            <param name="value">The instance of <see cref="T:System.DateTime"/>.</param>
            <param name="timeUnit">A time interval.</param>
            <returns>The new instance of <see cref="T:System.DateTime"/> with <paramref name="timeUnit"/> subtracted.</returns>
        </member>
        <member name="M:System.Extensions.DateTimeExtensions.Ceiling(System.DateTime,System.TimeUnit)">
            <summary>
            Returns the smallest <see cref="T:System.DateTime"/> value that is greater than or equal to the specified <paramref name="value"/> within the specified <paramref name="timeUnit"/>.
            </summary>
            <param name="value">The instance of <see cref="T:System.DateTime"/>.</param>
            <param name="timeUnit">A unit of time.</param>
            <returns>The smallest <see cref="T:System.DateTime"/> value that is greater than or equal to the specified <paramref name="value"/> within the specified <paramref name="timeUnit"/>.</returns>
        </member>
        <member name="M:System.Extensions.DateTimeExtensions.Floor(System.DateTime,System.TimeUnit)">
            <summary>
            Returns the largest <see cref="T:System.DateTime"/> that less than or equal to the specified <paramref name="value"/> within the specified <paramref name="timeUnit"/>.
            </summary>
            <param name="value">The instance of <see cref="T:System.DateTime"/>.</param>
            <param name="timeUnit">A unit of time.</param>
            <returns>The largest <see cref="T:System.DateTime"/> that less than or equal to the specified <paramref name="value"/> within the specified <paramref name="timeUnit"/>.</returns>
        </member>
        <member name="M:System.Extensions.DateTimeExtensions.IsLastTimeInterval(System.DateTime,System.TimeUnit)">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which specifies whether <paramref name="value"/> specifies last time interval.
            </summary>
            <param name="value">The instance of <see cref="T:System.DateTime"/>.</param>
            <param name="timeUnit">A unit of time.</param>
            <returns><c>true</c> if time unit is last, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.Extensions.DirectoryInfoExtensions">
            <summary>
            Provides a set of extension methods for the <see cref="T:System.IO.DirectoryInfo"/> class.
            </summary>
        </member>
        <member name="M:System.Extensions.DirectoryInfoExtensions.Clean(System.IO.DirectoryInfo)">
            <summary>
            Deletes all files and folders in the directory specified by the <paramref name="directoryInfo"/>.
            </summary>
            <param name="directoryInfo">A directory to clean.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryInfo"/> is <c>null</c>.</exception>
        </member>
        <member name="T:System.Extensions.EntityStateExtensions">
            <summary>
            Provides a set of extension methods for the <see cref="T:System.EntityState"/> enumeration.
            </summary>
        </member>
        <member name="M:System.Extensions.EntityStateExtensions.CanChangeTo(System.EntityState,System.EntityState,System.Collections.Generic.IEnumerable{System.EntityStateTransition})">
            <summary>
            Determines whether the state of the entity can be changed from the <paramref name="source"/> state to the <paramref name="target"/> state.
            </summary>
            <param name="source">The source state of the entity.</param>
            <param name="target">The target state of the entity.</param>
            <param name="workflow">The workflow of the entity.</param>
            <returns><c>true</c> if state can be change to the target one, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Extensions.EntityStateExtensions.ChangeTo(System.EntityState@,System.EntityState,System.Collections.Generic.IEnumerable{System.EntityStateTransition})">
            <summary>
            Changes the state of the entity from the <paramref name="source"/> state to the <paramref name="target"/> state.
            </summary>
            <param name="source">The source state of the entity.</param>
            <param name="target">The target state of the entity.</param>
            <param name="workflow">The workflow of the entity.</param>
            <exception cref="T:System.InvalidOperationException">State can not be changed from the <paramref name="source"/> state to the <paramref name="target"/> state.</exception>
            <returns>The original value of <paramref name="source"/>.</returns>
        </member>
        <member name="T:System.Linq.EnumerableExtensions">
            <summary>
            Provides a set of extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.ApplyRange``1(System.Collections.Generic.IEnumerable{``0},System.Int64,System.Int64)">
            <summary>
            Applies range on the iteration through the sequence of elements.
            </summary>
            <typeparam name="T">The type of the elements of the <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which to apply the range.</param>
            <param name="count">The count of elements to iterate.</param>
            <param name="startIndex">The index of the first element to start an iteration.</param>
            <returns>The range enumerator.</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.IsSingle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates whether <paramref name="source"/> has only one element.
            </summary>
            <typeparam name="T">The type of the elements of the <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that should be checked.</param>
            <returns><c>true</c> if <paramref name="source"/> has only one element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.IsMultiple``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates whether <paramref name="source"/> has more than one element.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> on which to apply the range.</param>
            <returns><c>true</c> if <paramref name="source"/> has more than one element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.SafeSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using the specified <paramref name="comparer"/> for their type.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="first"/> and <paramref name="second"/>.</typeparam>
            <param name="first">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to the <paramref name="second"/> sequence.</param>
            <param name="second">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to the <paramref name="first"/> sequence.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to compare elements of the <paramref name="first"/> and the <paramref name="second"/>.</param>
            <returns><c>true</c> if <paramref name="first"/> and <paramref name="second"/> are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.HasDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates whether <paramref name="source"/> has duplicate elements.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="selector"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to check.</param>
            <param name="selector">The function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys with.</param>
            <returns><c>true</c> if <paramref name="source"/> has duplicates, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.HasDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates whether <paramref name="source"/> has duplicate elements.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to check.</param>
            <returns><c>true</c> if <paramref name="source"/> has duplicates, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.Extensions.ArgumentExtensions">
            <summary>
            Provides a set of extension for checking arguments.
            </summary>
        </member>
        <member name="M:System.Extensions.ArgumentExtensions.CheckArgument``1(``0,System.String)">
            <summary>
            Checks if <paramref name="argument"/> is not null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <returns>Value of the <paramref name="argument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Extensions.ArgumentExtensions.CheckArgument(System.ISettings,System.String)">
            <summary>
            Checks if <paramref name="argument"/> of <see cref="T:System.ISettings"/> type is not null and <see cref="M:System.ISettings.IsValid"/>.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <returns>Value of the <paramref name="argument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="argument"/> is not valid.</exception>
        </member>
        <member name="M:System.Extensions.ArgumentExtensions.CheckArgument(System.String,System.String)">
            <summary>
            Checks if <paramref name="argument"/> of <see cref="T:System.String"/> is not null and not empty.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <returns>Value of the <paramref name="argument"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="argument"/> is empty.</exception>
        </member>
        <member name="T:System.Range`1">
            <summary>
            Represents a range.
            </summary>
            <typeparam name="T">The type of the range boundaries.</typeparam>
        </member>
        <member name="M:System.Range`1.#ctor(`0,`0)">
            <summary>
            Initialize a new instance of <see cref="T:System.Range`1"/> class.
            </summary>
            <param name="begin">A range begin.</param>
            <param name="end">A range end.</param>
        </member>
        <member name="M:System.Range`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Range`1"/> structure.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
        </member>
        <member name="M:System.Range`1.CompareTo(System.Range{`0})">
            <summary>
            Compares this object with another <see cref="T:System.Range`1"/> object.
            </summary>
            <param name="other">An <see cref="T:System.Range`1"/> object to compare with this object.</param>
            <returns>A -1 if this range is less then other, +1 if this range is greater than other, 0 if ranges overlap.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Range`1.CompareTo(`0)">
            <summary>
            Compares this instance with another object.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A -1 if this range is less then other, +1 if this range is greater than other, 0 if ranges overlap.</returns>
        </member>
        <member name="M:System.Range`1.Equals(System.Range{`0})">
            <summary>
            Returns a value indicating whether this instance and a specified <see cref="T:System.Range`1"/> represent the same value.
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Range`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.Range`1.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a <see cref="T:System.Value128"/> that has the same value as this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Range`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:System.Range`1.op_GreaterThan(System.Range{`0},System.Range{`0})">
            <summary>
            Defines whether <paramref name="first"/> is greater than <paramref name="second"/>.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> is greater than <paramref name="second"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Range`1.op_LessThan(System.Range{`0},System.Range{`0})">
            <summary>
            Defines whether <paramref name="first"/> is less than <paramref name="second"/>.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> is less than <paramref name="second"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Range`1.op_Equality(System.Range{`0},System.Range{`0})">
            <summary>
            Indicates whether the values of two specified <see cref="T:System.Range`1"/> objects are equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> and <paramref name="second"/> are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Range`1.op_Inequality(System.Range{`0},System.Range{`0})">
            <summary>
            Indicates whether the values of two specified <see cref="T:System.Value128"/> objects are not equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> and <paramref name="second"/> are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Range`1.Begin">
            <summary>
            Gets the begin of the range.
            </summary>
        </member>
        <member name="P:System.Range`1.End">
            <summary>
            Gets the end of the range.
            </summary>
        </member>
        <member name="T:System.LoadTest">
            <summary>
            Provides a load tests infrastructure.
            </summary>
        </member>
        <member name="M:System.LoadTest.Execute(System.String,System.Action{System.Int64},System.Int64)">
            <summary>
            Executes <paramref name="action"/> specified by <paramref name="iterationCount"/> number of times in a single task.
            </summary>
            <param name="testId">Test identifier.</param>
            <param name="action">An action to be executed.</param>
            <param name="iterationCount">A count of times an action will be executed.</param>
            <returns>A result of test execution.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.LoadTest.ExecuteCompare(System.String,System.Action{System.Int64},System.String,System.Action{System.Int64},System.Int64)">
            <summary>
            Executes two tests to compare results.
            </summary>
            <param name="firstTestId">An identifier of the first test.</param>
            <param name="firstAction">An action of the first test.</param>
            <param name="secondTestId">An identifier of the second test.</param>
            <param name="secondAction">An action of the second test.</param>
            <param name="iterationCount">A count of times an action will be executed.</param>
            <returns>A result of test execution.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="firstAction"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="secondAction"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.LoadTest.ExecuteParallelAsync(System.String,System.Action{System.Int64},System.Int64,System.Int64)">
            <summary>
            Asynchronously executes an <paramref name="action"/> specified by <paramref name="iterationCount"/> number of times in a specified by <paramref name="tasksCount"/> number of parallel tasks.
            </summary>
            <param name="testId">Test identifier.</param>
            <param name="action">An action to be executed.</param>
            <param name="iterationCount">A count of times an action will be executed.</param>
            <param name="tasksCount">A number of parallel tasks to execute <paramref name="action"/>.</param>
            <returns>A result of test execution.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.LoadTest.ExecuteParallelAsync(System.String,System.Func{System.Int64,System.Threading.Tasks.Task},System.Int64,System.Int64)">
            <summary>
            Asynchronously executes a <paramref name="func"/> specified by <paramref name="iterationCount"/> number of times in a specified by <paramref name="tasksCount"/> number of parallel tasks.
            </summary>
            <param name="testId">Test identifier.</param>
            <param name="func">A function to to be executed.</param>
            <param name="iterationCount">A count of times an action will be executed.</param>
            <param name="tasksCount">A number of parallel tasks to execute <paramref name="func"/>.</param>
            <returns>A result of test execution.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.LoadTest.ExecuteTransformation``2(System.Int64,System.Func{System.Int64,``0},System.Func{``0,``1},System.Func{``1,``0},System.Action{System.Int64,``0,``1,``0})">
            <summary>
            Executes transformation test.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="iterationCount"></param>
            <param name="initialize"></param>
            <param name="forward"></param>
            <param name="backward"></param>
            <param name="onError"></param>
            <returns>A result of test execution.</returns>
        </member>
        <member name="T:System.LoadTest.ComparedResults">
            <summary>
            Represents results of load test run.
            </summary>
        </member>
        <member name="M:System.LoadTest.ComparedResults.#ctor(System.LoadTest.Result,System.LoadTest.Result)">
            <summary>
            Initializes a new instance of <see cref="T:System.LoadTest.ComparedResults"/> class.
            </summary>
            <param name="firstTestResult">First test run result.</param>
            <param name="secondTestResult">Second test run result.</param>
        </member>
        <member name="M:System.LoadTest.ComparedResults.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:System.LoadTest.ComparedResults.AverageIterationTimeDifference">
            <summary>
            Gets a difference in average time in milliseconds taken for single action execution by two tests.
            </summary>
        </member>
        <member name="P:System.LoadTest.ComparedResults.DurationDifference">
            <summary>
            Gets a difference in duration of two tests.
            </summary>
        </member>
        <member name="P:System.LoadTest.ComparedResults.FirstTestResult">
            <summary>
            Gets a first test results.
            </summary>
        </member>
        <member name="P:System.LoadTest.ComparedResults.SecondTestResult">
            <summary>
            Gets a second test results.
            </summary>
        </member>
        <member name="P:System.LoadTest.ComparedResults.VelocityDifference">
            <summary>
            Gets a difference in count of action executed per second by two tests.
            </summary>
        </member>
        <member name="T:System.LoadTest.Result">
            <summary>
            Represents results of load test run.
            </summary>
        </member>
        <member name="M:System.LoadTest.Result.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of <see cref="T:System.LoadTest.Result"/> class.
            </summary>
            <param name="id">Test identifier.</param>
            <param name="iterationCount">A number of times a test was run.</param>
            <param name="duration">Total elapsed test run time, in milliseconds.</param>
        </member>
        <member name="M:System.LoadTest.Result.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:System.LoadTest.Result.AverageIterationTime">
            <summary>
            Gets average time in milliseconds taken for single action execution.
            </summary>
        </member>
        <member name="P:System.LoadTest.Result.Duration">
            <summary>
            Gets a test duration.
            </summary>
        </member>
        <member name="P:System.LoadTest.Result.Id">
            <summary>
            Gets a test identifier.
            </summary>
        </member>
        <member name="P:System.LoadTest.Result.IterationCount">
            <summary>
            Gets a count of times an action was executed.
            </summary>
        </member>
        <member name="P:System.LoadTest.Result.Velocity">
            <summary>
            Gets a count of action executed per second.
            </summary>
        </member>
        <member name="T:System.ServerSettings">
            <summary>
            Specifies the configuration settings for a <see cref="T:System.ServerBase"/> class.
            </summary>
        </member>
        <member name="F:System.ServerSettings.performanceCounters">
            <summary>
            A dictionary of configuration settings for the performance counters.
            </summary>
        </member>
        <member name="M:System.ServerSettings.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.ServerSettings"/> class.
            </summary>
        </member>
        <member name="M:System.ServerSettings.IsValid">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates whether this configuration settings are valid.
            </summary>
            <returns><c>true</c> if configuration settings are valid,<c>false</c> otherwise.</returns>
        </member>
        <member name="P:System.ServerSettings.EnvironmentId">
            <summary>
            Gets or sets the identifier of the environment.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty.</exception>
        </member>
        <member name="P:System.ServerSettings.Name">
            <summary>
            Gets or sets the name of the server.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty.</exception>
        </member>
        <member name="P:System.ServerSettings.PerformanceCounters">
            <summary>
            Gets or sets the dictionary of configuration settings for the performance counters.
            </summary>
        </member>
        <member name="T:System.IFlushable">
            <summary>
            Provides a contract for all types that provides the data flushing.
            </summary>
        </member>
        <member name="M:System.IFlushable.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates an asynchronous operation to flush the data.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for a task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.IFlushable.FlushAsync">
            <summary>
            Initiates an asynchronous operation to flush the data.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous operation.</returns>
        </member>
        <member name="T:System.MemoryStreamManager">
            <summary>
            Provides management of the instances of the <see cref="T:System.IO.MemoryStream"/> class.
            </summary>
        </member>
        <member name="F:System.MemoryStreamManager.freeStreams">
            <summary>
            A dictionary of ready to be used streams grouped by size.
            </summary>
        </member>
        <member name="M:System.MemoryStreamManager.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:System.MemoryStreamManager"/> class.
            </summary>
            <param name="capacity">The maximal capacity of the <see cref="T:System.IO.MemoryStream"/> in bytes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than<c>1</c>.</exception>
        </member>
        <member name="M:System.MemoryStreamManager.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="M:System.MemoryStreamManager.Put(System.IO.MemoryStream)">
            <summary>
            Puts <paramref name="stream"/> into the set of free streams.
            </summary>
            <param name="stream">An instance of <see cref="T:System.IO.MemoryStream"/>.</param>
        </member>
        <member name="M:System.MemoryStreamManager.Get">
            <summary>
            Gets a stream.
            </summary>
            <returns>An instance of <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="P:System.MemoryStreamManager.Capacity">
            <summary>
            Gets the capacity of <see cref="T:System.IO.MemoryStream"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.PerformanceCounterSettings">
            <summary>
            Specifies the configuration settings for a <see cref="T:System.Diagnostics.PerformanceCounter"/> class.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterSettings.category">
            <summary>
            The name of the performance counter category (performance object) with which this performance counter is associated.
            </summary>
        </member>
        <member name="F:System.Diagnostics.PerformanceCounterSettings.name">
            <summary>
            The name of the performance counter.
            </summary>
        </member>
        <member name="M:System.Diagnostics.PerformanceCounterSettings.IsValid">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates whether this configuration settings are valid.
            </summary>
            <returns><c>true</c> if configuration settings are valid,<c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Diagnostics.PerformanceCounterSettings.CreateInstance">
            <summary>
            Creates a new instance of <see cref="T:System.Diagnostics.PerformanceCounter"/> based on current configuration settings.
            </summary>
            <returns>A new instance of <see cref="T:System.Diagnostics.PerformanceCounter"/>.</returns>
        </member>
        <member name="P:System.Diagnostics.PerformanceCounterSettings.Category">
            <summary>
            Gets or sets the name of the performance counter category for this performance counter.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty.</exception>
        </member>
        <member name="P:System.Diagnostics.PerformanceCounterSettings.CounterType">
            <summary>
            Gets or sets the type of the performance counter.
            </summary>
        </member>
        <member name="P:System.Diagnostics.PerformanceCounterSettings.Name">
            <summary>
            Gets or sets the name of the performance counter.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty.</exception>
        </member>
        <member name="P:System.Diagnostics.PerformanceCounterSettings.ReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance of <see cref="T:System.Diagnostics.PerformanceCounter"/> should be initialized as read-only.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.SequentialExecutor">
            <summary>
            Provides sequential execution of tasks.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.SequentialExecutor.queue">
            <summary>
            A queue of tasks to execute sequentially.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.SequentialExecutor.currentTask">
            <summary>
            A reference to the current task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.SequentialExecutor.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Threading.Tasks.SequentialExecutor"/> class.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.SequentialExecutor.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.SequentialExecutor.RunAsync">
             <summary>
            Initiates an asynchronous operation to execute a sequence of functions from the work queue.
             </summary>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.SequentialExecutor.Enqueue(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Enqueues the <paramref name="function"/> to run sequentially.
            </summary>
            <param name="function">The work to execute sequentially.</param>
        </member>
        <member name="M:System.Threading.Tasks.SequentialExecutor.GetAwaiter">
            <summary>
            Gets an awaiter used to await current instance.
            </summary>
            <returns>An instance of <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/>.</returns>
        </member>
        <member name="M:System.Threading.Tasks.SequentialExecutor.Wait">
            <summary>
            Waits for the <see cref="T:System.Threading.Tasks.SequentialExecutor"/> to complete execution.
            </summary>
            <exception cref="T:System.AggregateException"> The <see cref="T:System.Threading.Tasks.Task"/> was canceled -or- an exception was thrown during the execution of the <see cref="T:System.Threading.Tasks.Task"/>.</exception>
        </member>
        <member name="E:System.Threading.Tasks.SequentialExecutor.OnException">
            <summary>
            Occurs when exception has been thrown by currently executing task.
            </summary>
        </member>
        <member name="T:System.Value128">
            <summary>
            Represents a 128 bit value.
            </summary>
        </member>
        <member name="F:System.Value128.Base16EncodedSymbolsCount">
            <summary>
            Number of symbols in Base16 representation of <see cref="T:System.Value128"/>.
            </summary>
        </member>
        <member name="F:System.Value128.Base32EncodedSymbolsCount">
            <summary>
            Number of symbols in Base32 representation of <see cref="T:System.Value128"/>.
            </summary>
        </member>
        <member name="F:System.Value128.Base64EncodedSymbolsCount">
            <summary>
            Number of symbols in Base64 representation of <see cref="T:System.Value128"/>.
            </summary>
        </member>
        <member name="F:System.Value128.base16Map">
            <summary>
            A set of chars which are used to encode <see cref="T:System.Value128"/> using <see cref="F:System.BaseEncoding.Base16"/> encoding.
            </summary>
        </member>
        <member name="F:System.Value128.base32Map">
            <summary>
            A set of chars which are used to encode <see cref="T:System.Value128"/> using <see cref="F:System.BaseEncoding.Base32"/> encoding.
            </summary>
        </member>
        <member name="F:System.Value128.base64Map">
            <summary>
            A set of chars which are used to encode <see cref="T:System.Value128"/> using <see cref="F:System.BaseEncoding.Base64"/> encoding.
            </summary>
        </member>
        <member name="F:System.Value128.Zero">
            <summary>
            A read-only instance of the <see cref="T:System.Value128"/> structure whose value is all zeros.
            </summary>
        </member>
        <member name="F:System.Value128.One">
            <summary>
            A read-only instance of the <see cref="T:System.Value128"/> structure which represents 1 number.
            </summary>
        </member>
        <member name="F:System.Value128.higherHalf">
            <summary>
            A higher half of the value.
            </summary>
        </member>
        <member name="F:System.Value128.lowerHalf">
            <summary>
            A lower half of the value.
            </summary>
        </member>
        <member name="M:System.Value128.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of <see cref="T:System.Value128"/> structure.
            </summary>
            <param name="higherHalf">A highest 64 bit of 128 bit value.</param>
            <param name="lowerHalf">A lowest 64 bit of 128 bit value.</param>
        </member>
        <member name="M:System.Value128.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:System.Value128"/> structure.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
        </member>
        <member name="M:System.Value128.CompareTo(System.Value128)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Value128"/> object and returns an indication of their relative values.
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="other"/>.</returns>
        </member>
        <member name="M:System.Value128.Equals(System.Value128)">
            <summary>
            Returns a value indicating whether this instance and a specified <see cref="T:System.Value128"/> represent the same value.
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Value128.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.Value128.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a <see cref="T:System.Value128"/> that has the same value as this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Value128.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:System.Value128.ToString">
            <summary>
            Converts instance of <see cref="T:System.Value128"/> to the instance of <see cref="T:System.String"/> using Base64 encoding with padding.
            </summary>
            <returns>An instance of <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:System.Value128.op_GreaterThan(System.Value128,System.Value128)">
            <summary>
            Defines whether <paramref name="first"/> is greater than <paramref name="second"/>.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> is greater than <paramref name="second"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Value128.op_LessThan(System.Value128,System.Value128)">
            <summary>
            Defines whether <paramref name="first"/> is less than <paramref name="second"/>.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> is less than <paramref name="second"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Value128.op_Equality(System.Value128,System.Value128)">
            <summary>
            Indicates whether the values of two specified <see cref="T:System.Value128"/> objects are equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> and <paramref name="second"/> are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Value128.op_Inequality(System.Value128,System.Value128)">
            <summary>
            Indicates whether the values of two specified <see cref="T:System.Value128"/> objects are not equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> and <paramref name="second"/> are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Value128.op_Addition(System.Value128,System.Value128)">
            <summary>
            Adds two specified <see cref="T:System.Value128"/> values.
            </summary>
            <param name="first">The first value to add.</param>
            <param name="second">The second value to add.</param>
            <returns>The sum of <paramref name="first"/> and <paramref name="second"/>.</returns>
        </member>
        <member name="M:System.Value128.op_Subtraction(System.Value128,System.Value128)">
            <summary>
            Subtracts one specified <see cref="T:System.Value128"/> value from another.
            </summary>
            <param name="first">The minuend.</param>
            <param name="second">The subtrahend.</param>
            <returns>The result of subtracting <paramref name="second"/> from <paramref name="first"/>.</returns>
        </member>
        <member name="M:System.Value128.Add(System.Value128,System.Value128)">
            <summary>
            Adds two specified <see cref="T:System.Value128"/> values.
            </summary>
            <param name="first">The first value to add.</param>
            <param name="second">The second value to add.</param>
            <returns>The sum of <paramref name="first"/> and <paramref name="second"/>.</returns>
        </member>
        <member name="M:System.Value128.Subtract(System.Value128,System.Value128)">
            <summary>
            Subtracts one specified <see cref="T:System.Value128"/> value from another.
            </summary>
            <param name="first">The minuend.</param>
            <param name="second">The subtrahend.</param>
            <returns>The result of subtracting <paramref name="second"/> from <paramref name="first"/>.</returns>
        </member>
        <member name="M:System.Value128.ToString(System.BaseEncoding)">
            <summary>
            Converts instance of <see cref="T:System.Value128"/> to the instance of <see cref="T:System.String"/> using specified <paramref name="encoding"/>.
            </summary>
            <param name="encoding">Specifies the type of Base encoding to use.</param>
            <returns>An instance of <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:System.Value128.TryConvert(System.String,System.UInt16,System.Value128@,System.BaseEncoding)">
            <summary>
            Tries to convert the <see cref="T:System.String"/> representation of the <see cref="T:System.Value128"/> to the equivalent structure.
            </summary>
            <param name="value">An instance of <see cref="T:System.String"/> to convert.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <param name="result">Contains valid <see cref="T:System.Value128"/> if operation was successful, <see cref="F:System.Value128.Zero"/> otherwise.</param>
            <param name="encoding">Specifies the type of Base encoding to use.</param>
            <returns><c>true</c> if operation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Value128.Convert(System.String,System.UInt16,System.BaseEncoding)">
            <summary>
            Converts the Base64 <see cref="T:System.String"/> representation of the <see cref="T:System.Value128"/> to the equivalent structure.
            </summary>
            <param name="value">An instance of <see cref="T:System.String"/> to convert.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <param name="encoding">Specifies the type of Base encoding to use.</param>
            <returns>The structure that will contain the parsed value, if the parse operation was successful; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.Value128.op_Implicit(System.Value128)~System.String">
            <summary>
            Converts instance of <see cref="T:System.Value128"/> to the instance of <see cref="T:System.String"/> using Base64 encoding with padding.
            </summary>
            <param name="value">An instance of <see cref="T:System.Value128"/> to convert.</param>
            <returns>An instance of <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:System.Value128.ToBase16String">
            <summary>
            Converts an instance of <see cref="T:System.Value128"/> to string using <see cref="F:System.BaseEncoding.Base16"/> encoding.
            </summary>
            <returns>The string representation of the current value.</returns>
        </member>
        <member name="M:System.Value128.TryConvertFromBase16String(System.String,System.UInt16,System.Value128@)">
            <summary>
            Tries to convert the Base16 <see cref="T:System.String"/> representation of a <see cref="T:System.Value128"/> to the equivalent structure.
            </summary>
            <param name="value">An instance of <see cref="T:System.String"/> to convert.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <param name="result">Contains valid <see cref="T:System.Value128"/> if operation was successful, <see cref="F:System.Value128.Zero"/> otherwise.</param>
            <returns><c>true</c> if operation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Value128.ToBase32String(System.Boolean)">
            <summary>
            Converts an instance of <see cref="T:System.Value128"/> structure the Base32 <see cref="T:System.String"/> representation.
            </summary>
            <param name="usePadding">Specifies whether to use padding.</param>
            <returns>An instance of <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:System.Value128.TryConvertFromBase32String(System.String,System.UInt16,System.Value128@)">
            <summary>
            Tries to convert the Base32 <see cref="T:System.String"/> representation of a <see cref="T:System.Value128"/> to the equivalent structure.
            </summary>
            <param name="value">An instance of <see cref="T:System.String"/> to convert.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <param name="result">Contains valid <see cref="T:System.Value128"/> if operation was successful, <see cref="F:System.Value128.Zero"/> otherwise.</param>
            <returns><c>true</c> if operation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Value128.ToBase64String(System.Boolean)">
            <summary>
            Converts an instance of <see cref="T:System.Value128"/> structure the Base64 <see cref="T:System.String"/> representation.
            </summary>
            <param name="usePadding">Specifies whether to use padding.</param>
            <returns>An instance of <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:System.Value128.TryConvertFromBase64String(System.String,System.UInt16,System.Value128@)">
            <summary>
            Tries to convert the Base64 <see cref="T:System.String"/> representation of a <see cref="T:System.Value128"/> to the equivalent structure.
            </summary>
            <param name="value">An instance of <see cref="T:System.String"/> to convert.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <param name="result">Contains valid <see cref="T:System.Value128"/> if operation was successful, <see cref="F:System.Value128.Zero"/> otherwise.</param>
            <returns><c>true</c> if operation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Value128.op_Implicit(System.Value128)~System.Byte[]">
            <summary>
            Converts an instance of <see cref="T:System.Value128"/> structure to the instance of <see cref="T:System.Array"/> class.
            </summary>
            <param name="value">An instance of <see cref="T:System.Value128"/> to convert.</param>
            <returns>An <see cref="T:System.Array"/> instance.</returns>
        </member>
        <member name="M:System.Value128.TryConvert(System.Byte[],System.Int32,System.Value128@)">
            <summary>
            Tries to convert a byte array representation of a <see cref="T:System.Value128"/> to the equivalent structure.
            </summary>
            <param name="value">An instance of <see cref="T:System.Array"/> to convert.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <param name="result">Contains valid <see cref="T:System.Value128"/> if operation was successful, <see cref="F:System.Value128.Zero"/> otherwise.</param>
            <returns><c>true</c> if operation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Value128.op_Implicit(System.Value128)~System.Net.IPAddress">
            <summary>
            Converts an instance of <see cref="T:System.Value128"/> structure to the instance of <see cref="T:System.Net.IPAddress"/> class.
            </summary>
            <param name="value">An instance of <see cref="T:System.Value128"/> to convert.</param>
            <returns>An <see cref="T:System.Net.IPAddress"/> instance.</returns>
        </member>
        <member name="M:System.Value128.TryConvert(System.Net.IPAddress,System.Value128@)">
            <summary>
            Tries to convert an instance of <see cref="T:System.Net.IPAddress"/> to the equivalent instance of <see cref="T:System.Value128"/> structure.
            </summary>
            <param name="value">An instance of <see cref="T:System.Net.IPAddress"/> to convert.</param>
            <param name="result">Contains valid <see cref="T:System.Value128"/> if operation was successful, <see cref="F:System.Value128.Zero"/> otherwise.</param>
            <returns><c>true</c> if operation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Value128.op_Implicit(System.Guid)~System.Value128">
            <summary>
            Converts an instance of <see cref="T:System.Guid"/> structure to the instance of <see cref="T:System.Value128"/> structure.
            </summary>
            <param name="value">An instance of <see cref="T:System.Guid"/> to convert.</param>
            <returns>An <see cref="T:System.Value128"/> instance.</returns>
        </member>
        <member name="M:System.Value128.op_Implicit(System.Value128)~System.Guid">
            <summary>
            Converts an instance of <see cref="T:System.Value128"/> structure to the instance of <see cref="T:System.Guid"/> structure.
            </summary>
            <param name="value">An instance of <see cref="T:System.Value128"/> to convert.</param>
            <returns>An <see cref="T:System.Guid"/> instance.</returns>
        </member>
        <member name="P:System.Value128.HigherHalf">
            <summary>
            The higher half of the value.
            </summary>
        </member>
        <member name="P:System.Value128.LowerHalf">
            <summary>
            The lower half of the value.
            </summary>
        </member>
        <member name="T:System.Json.EncodingJsonConverter">
            <summary>
            Converts an instance of <see cref="T:System.Text.Encoding"/> class to and from string within the JSON.
            </summary>
        </member>
        <member name="M:System.Json.EncodingJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns><c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Json.EncodingJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.Json.EncodingJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="T:System.DisposableBase">
            <summary>
            Provides a base class for types that are disposable.
            </summary>
        </member>
        <member name="M:System.DisposableBase.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:System.DisposableBase"/> class.
            </summary>
        </member>
        <member name="M:System.DisposableBase.Dispose">
            <summary>
            Releases resources associated with the current instance.
            </summary>
        </member>
        <member name="M:System.DisposableBase.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the current instance.
            </summary>
            <param name="fromDispose">Value indicating whether method was called from the <see cref="M:System.DisposableBase.Dispose"/> method.</param>
        </member>
        <member name="M:System.DisposableBase.ReleaseResources">
            <summary>
            Releases managed resources held by class.
            </summary>
        </member>
        <member name="P:System.DisposableBase.IsDisposed">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value which indicates whether current instance is disposed.
            </summary>
        </member>
        <member name="T:System.WorkerBase">
            <summary>
            Provides a base class for the workers.
            </summary>
        </member>
        <member name="F:System.WorkerBase.workerWorkflow">
            <summary>
            A list of the transitions of the state of the entity that are specific for the current worker.
            </summary>
        </member>
        <member name="F:System.WorkerBase.workflow">
            <summary>
            The workflow of the entity.
            </summary>
        </member>
        <member name="F:System.WorkerBase.state">
            <summary>
            An object that represents format about the current instance's lifetime state.
            </summary>
        </member>
        <member name="M:System.WorkerBase.#ctor(System.Diagnostics.Tracing.DiagnosticsEventHandler,System.Collections.Generic.IEnumerable{System.EntityStateTransition})">
            <summary>
            Initializes a new instance of <see cref="T:System.WorkerBase"/> class.
            </summary>
            <param name="diagnosticEventHandler">A delegate to the method that will handle the <see cref="E:System.WorkerBase.DiagnosticEvent"/>.</param>
            <param name="workflowExtension">The extension of the worker workflow.</param>
            <remarks>Constructor of the final class must set <see cref="P:System.WorkerBase.State"/> to the <see cref="F:System.EntityState.Inactive"/> state.</remarks>
        </member>
        <member name="M:System.WorkerBase.ReleaseResources">
            <summary>
            Releases managed resources held by class.
            </summary>
        </member>
        <member name="M:System.WorkerBase.ReleaseManagedResources">
            <summary>
            Releases managed resources held by class.
            </summary>
        </member>
        <member name="M:System.WorkerBase.OnStateChanged(System.Object,System.ValueChangedEventArgs{System.EntityState})">
            <summary>
            Executes on <see cref="E:System.WorkerBase.StateChanged"/> event.
            </summary>
            <param name="sender">The reference to the object that raised the event.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="M:System.WorkerBase.ExecuteActivateOperationsAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates an asynchronous operation to perform operations required to activate worker.
            </summary>
            <remarks>Executes when <see cref="M:System.WorkerBase.ActivateAsync(System.Threading.CancellationToken)"/> method is called</remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for a task to complete.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> object of type <see cref="T:System.Boolean"/>&gt; that represents the asynchronous operation.
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> equals <c>true</c> if operation has completed successfully, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.WorkerBase.ExecuteDeactivateOperationsAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates an asynchronous operation to perform operations required to deactivate worker.
            </summary>
            <remarks>Executes when <see cref="M:System.WorkerBase.DeactivateAsync(System.Threading.CancellationToken)"/> method is called</remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for a task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.WorkerBase.TraceEvent(System.Diagnostics.Tracing.EventLevel,System.String,System.String)">
            <summary>
            Raises <see cref="E:System.WorkerBase.DiagnosticEvent"/> if there are subscribers.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="message">The message of the event.</param>
            <param name="source">The source of the event.</param>
        </member>
        <member name="M:System.WorkerBase.ActivateAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates an asynchronous operation to start server.
            </summary>
            <remarks>Requires server to be in <see cref="F:System.EntityState.Inactive"/> state.</remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for a task to complete.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> object of type <see cref="T:System.Boolean"/>&gt; that represents the asynchronous operation.
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> equals <c>true</c> if operation has completed successfully, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.WorkerBase.DeactivateAsync(System.Threading.CancellationToken)">
            <summary>
            Initiates an asynchronous operation to stop server.
            </summary>
            <remarks>Requires server to be in <see cref="F:System.EntityState.Active"/> state.</remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for a task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous operation.</returns>
        </member>
        <member name="E:System.WorkerBase.StateChanged">
            <summary>
            Occurs when the state of the current instance is changed.
            </summary>
        </member>
        <member name="E:System.WorkerBase.DiagnosticEvent">
            <summary>
            Occurs when diagnostic event within the instance has occurred.
            </summary>
        </member>
        <member name="P:System.WorkerBase.IsActive">
            <summary>
            Gets a value which indicates whether current instance is active.
            </summary>
        </member>
        <member name="P:System.WorkerBase.Name">
            <summary>
            Gets the name of the instance.
            </summary>
        </member>
        <member name="P:System.WorkerBase.State">
            <summary>
            Gets or sets the state of the current entity.
            </summary>
            <exception cref="T:System.InvalidOperationException">State can not be changed from the current state to the target state.</exception>
        </member>
        <member name="P:System.WorkerBase.Workflow">
            <summary>
            Gets the workflow of the current instance as the list of the transitions of the state of the entity.
            </summary>
        </member>
        <member name="T:System.ServerBase">
            <summary>
            Provides a base class for the servers.
            </summary>
        </member>
        <member name="F:System.ServerBase.activeTasks">
            <summary>
            A dictionary which contains active tasks.
            </summary>
        </member>
        <member name="F:System.ServerBase.activeTasksCounter">
            <summary>
            An instance of <see cref="T:System.Diagnostics.PerformanceCounter"/> which measures the count of active tasks.
            </summary>
        </member>
        <member name="F:System.ServerBase.badRequestsPerSecondCounter">
            <summary>
            An instance of <see cref="T:System.Diagnostics.PerformanceCounter"/> which measures the count of bad requests per second.
            </summary>
        </member>
        <member name="F:System.ServerBase.name">
            <summary>
            The name of the instance.
            </summary>
        </member>
        <member name="F:System.ServerBase.performanceCounters">
            <summary>
            A dictionary of performance counters.
            </summary>
        </member>
        <member name="F:System.ServerBase.requestProcessingAverageBaseCounter">
            <summary>
            An instance of <see cref="T:System.Diagnostics.PerformanceCounter"/> which measures the average time base to process the requests.
            </summary>
        </member>
        <member name="F:System.ServerBase.requestProcessingAverageTimeCounter">
            <summary>
            An instance of <see cref="T:System.Diagnostics.PerformanceCounter"/> which measures the average time to process the requests.
            </summary>
        </member>
        <member name="F:System.ServerBase.requestsPerSecondCounter">
            <summary>
            An instance of <see cref="T:System.Diagnostics.PerformanceCounter"/> which measures the count of requests per second.
            </summary>
        </member>
        <member name="M:System.ServerBase.#ctor(System.ServerSettings,System.Diagnostics.Tracing.DiagnosticsEventHandler)">
            <summary>
            Initialize a new instance of <see cref="T:System.ServerBase"/> class.
            </summary>
            <param name="settings">A server configuration settings.</param>
            <param name="diagnosticEventHandler">A delegate to the method that will handle the <see cref="E:System.WorkerBase.DiagnosticEvent"/>.</param>
            <remarks>Constructor of the final class must set <see cref="P:System.WorkerBase.State"/> to the <see cref="F:System.EntityState.Inactive"/> state.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="settings"/> is <c>null</c> or is not valid.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="settings"/> does not contains the required performance counter configuration.</exception>
        </member>
        <member name="M:System.ServerBase.ReleaseManagedResources">
            <summary>
            Releases managed resources held by current instance.
            </summary>
        </member>
        <member name="M:System.ServerBase.TryAwaitRequestAsync">
            <summary>
            Initiates an asynchronous operation to try await the request.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> object of type <see cref="T:System.IServerRequestHandler"/> that represents the asynchronous operation.
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> refers to the instance of <see cref="T:System.IServerRequestHandler"/> if operation was successful, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:System.ServerBase.FinalizeRequestIfCompleted(System.Collections.Generic.KeyValuePair{System.Threading.Tasks.Task{System.Boolean},System.IServerRequestHandler})">
            <summary>
            Performs finalization routines for the task and handler if tasks is completed.
            </summary>
            <param name="pair">A task and handler pair to finalize.</param>
            <returns><c>true</c> if task is completed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServerBase.RunAsync">
            <summary>
            Initiates an asynchronous operation to process the requests.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object that represents the asynchronous operation.</returns>
        </member>
        <member name="P:System.ServerBase.PerformanceCounters">
            <summary>
            Gets the dictionary of performance counters.
            </summary>
        </member>
        <member name="P:System.ServerBase.Name">
            <summary>
            Gets the name of the instance.
            </summary>
        </member>
    </members>
</doc>
